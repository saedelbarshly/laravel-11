"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)


    # customers: [Customer!]! @ll

    customers: [Customer!]! @paginate

    customer(id: ID @eq): Customer @find

    posts: [Post]! @all
    post(id: ID @eq): Post @find

}

type Mutation {
    createCustomer(name: String!, email: String!): Customer! @create
    updateCustomer(id: ID!, name: String!, email: String!): Customer! @update
    deleteCustomer(id: ID! @whereKey): Customer @delete
    upsertCustomer(id: ID!, name: String!, email: String): Customer! @upsert  #like createOrUpdate fun

    # postCreate(title: string!): Post! @create
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}


type Customer {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]! @hasMany
  created_at: DateTime!
  updated_at: DateTime!
}

type Post {
  id: ID!
  title: String!
  author: Customer! @belongsTo
}
